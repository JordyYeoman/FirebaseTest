import Head from "next/head";
import styles from "../styles/Home.module.css";
// Import the functions you need from the SDKs you need
import { initializeApp } from "firebase/app";
import {
  getFirestore,
  collection,
  addDoc,
  deleteDoc,
  doc,
} from "firebase/firestore";
import { useCollection } from "react-firebase-hooks/firestore";
import { useEffect } from "react";
import FormyBoi from "../components/Form";

// Your web app's Firebase configuration
const firebaseConfig = {
  apiKey: `${process.env.NEXT_PUBLIC_FIREBASE_API_KEY}`,
  authDomain: `${process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN}`,
  projectId: `${process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID}`,
  storageBucket: `${process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET}`,
  messagingSenderId: `${process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID}`,
  appId: `${process.env.NEXT_PUBLIC_FIREBASE_APP_ID}`,
};

const db = getFirestore(initializeApp(firebaseConfig));

export default function Home() {
  const [value, loading, error] = useCollection(collection(db, "books"), {
    snapshotListenOptions: { includeMetadataChanges: true },
  });
  useEffect(() => {
    console.log("Render!!");
  }, [value]);

  const addBook = (e) => {
    e.preventDefault();
    let form = document.querySelector(".add");
    addDoc(collection(db, "books"), {
      title: form.elements["title"].value,
      author: form.elements["author"].value,
    }).then(() => {
      form.reset();
    });
  };
  const deleteBook = (id) => {
    deleteDoc(doc(db, "books", id));
  };

  if (loading) {
    return <div>Loading bou!</div>;
  }
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <h1 className={styles.title}>
        Welcome to <a href="https://nextjs.org">Next.js!</a>
      </h1>
      <div>
        <p>
          {error && <strong>Error: {JSON.stringify(error)}</strong>}
          {loading && <span>Collection: Loading...</span>}
          {value && (
            <span>
              Collection:{" "}
              {value.docs.map((doc) => (
                <div key={doc.id}>
                  {JSON.stringify(doc.data())}
                  <button
                    style={{
                      borderRadius: "100%",
                      backgroundColor: "red",
                      width: "20px",
                      height: "20px",
                      margin: "10px",
                      textAlign: "center",
                    }}
                    onClick={() => {
                      deleteBook(doc.id);
                    }}
                  >
                    X
                  </button>
                </div>
              ))}
            </span>
          )}
        </p>
      </div>
      <form className="add" onSubmit={addBook}>
        <label for="title">Title:</label>
        <input type="text" name="title" />
        <label for="author">Author:</label>
        <input type="text" name="author" />
        <button>Add new book</button>
      </form>
    </div>
  );
}
